AWSTemplateFormatVersion: "2010-09-09"

Description: Crowd

Parameters:
  # ===== General Section =====
  S3Templates:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3Templates
  VPCName:
    Type: String
    Default: ised
  VPCId:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  ISEDProjectId:
    Type: String
    Default: ccots-crowd
  CostCentre:
    Type: String
    Default: cio-rdad
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  EC2Ami:
    Type: String
    Description: Specify if restoring from Ami, otherwise leave blank

  # ===== EBS Volumes =====
  EC2RootVolumeSize:
    Type: String
    Default: 8
  EC2AppVolumeSize:
    Type: String
    Default: 2
  EC2AppVolumeMount:
    Type: String
    Default: /dev/sdg
  EC2DataVolumeSize:
    Type: String
    Default: 20
  EC2DataVolumeMount:
    Type: String
    Default: /dev/sdf

  # ===== RDS Section =====
  RDSStorage:
    Type: String
    Default: 20
  RDSSize:
    Type: String
    Default: db.t3.large
  RDSEngine:
    Type: String
    Default: postgres
  RDSEngineVersion:
    Type: String
    Default: 9.6.16
  RDSSnapshot:
    Description: Specify if restoring from snapshot
    Type: String
  RDSMasterUserPassword:
    NoEcho: true
    Type: String
  DBName:
    Type: String
    Default: crowd

  # ===== Crowd =====
  CrowdArchiveUrl:
    Description: The Url to the archive (.tar.gz)
    Type: String
  CrowdInstanceDomain:
    Description: Domain name to reach this new Bitbucket install
    Type: String

Conditions:
  IsProd: !Equals [ !Ref Environment, prod ]
  IsEC2Restore: !Not [ !Equals [ !Ref EC2Ami, "" ] ]
  IsRDSRestore: !Not [ !Equals [ !Ref RDSSnapshot, "" ] ]

Resources:

  EC2:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ '', [!Ref S3Templates, "ec2.yaml" ]]
      Parameters:
        # ===== General Section =====
        ISEDProjectId: !Ref ISEDProjectId
        CostCentre: !Ref CostCentre
        Environment: !Ref Environment
        VPCId: !Ref VPCId
        SubnetId: !Ref SubnetId
        Schedule: !If [ IsProd, 24-7, office-hours ]

        # ===== EC2 Section =====
        EC2OS: Linux
        EC2Size: t3.large
        EC2Ami: !Ref EC2Ami
        EC2RootVolumeSize: !If [ IsEC2Restore, "", !Ref EC2RootVolumeSize ]
        EBSVolume1Size: !If [ IsEC2Restore, "", !Ref EC2AppVolumeSize ]
        EBSVolume1Mount: !If [ IsEC2Restore, "",!Ref EC2AppVolumeMount ]
        EBSVolume2Size: !If [ IsEC2Restore, "", !Ref EC2DataVolumeSize ]
        EBSVolume2Mount: !If [ IsEC2Restore, "", !Ref EC2DataVolumeMount ]
        EC2Options: !If [ IsEC2Restore, "Restore", "Create" ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe

            wget "https://github.com/stephane-berube/cots-mods/archive/crowd.zip" -O /tmp/pkg.zip
            unzip /tmp/pkg.zip -d /tmp

            chmod 700 /tmp/cots-mods-crowd/install.sh
            /tmp/cots-mods-crowd/install.sh "${CrowdArchiveUrl}" "${EC2DataVolumeMount}" "${EC2AppVolumeMount}" "${Environment}" "${CrowdInstanceDomain}"

  # Allow incoming connection on Crowd's listening port from ALB VPC
  IngressCrowd:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt EC2.Outputs.EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 8095
      ToPort: 8095
      CidrIp: 100.96.192.0/24

  RDS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ '', [!Ref S3Templates, "rds.yaml" ]]
      Parameters:
        # ===== General Section =====
        ISEDProjectId: !Ref ISEDProjectId
        CostCentre: !Ref CostCentre
        Environment: !Ref Environment
        VPCId: !Ref VPCId
        Schedule: !If [ IsProd, 24-7, office-hours ]
        VPCName: !Ref VPCName
        # ===== RDS Section =====
        DBName: !Ref DBName
        RDSEngine: !Ref RDSEngine
        RDSEngineVersion: !Ref RDSEngineVersion
        RDSStorage: !Ref RDSStorage
        RDSSize: !Ref RDSSize
        RDSMaxStorage: ""
        RDSSnapshot: !Ref RDSSnapshot
        RDSBackupRetentionPeriod: !If [ IsProd, 30, 7 ]
        RDSMasterUserPassword: !Ref RDSMasterUserPassword
        Ec2IpAddress: !GetAtt EC2.Outputs.EC2PrivateIp
        RDSOptions: !If [ IsRDSRestore, "Restore", "Create" ]

  # Allow incoming connections on port 5432 from this VPC
  IngressPostgres:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming connections from EC2s from VPC to RDS on port 5432 (Postgresql)
      GroupId: !GetAtt RDS.Outputs.RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      CidrIp:
        Fn::ImportValue:
          Fn::Sub:  "vpc-cidrblock-${VPCName}-${Environment}"

  # Atlassian related configuration
  SecurityGroupAtlassianEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Atlassian EC2 Security Group"
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "vpc-${VPCName}-${Environment}"
      Tags:
      - Key: Name
        Value: !Join ['-', ["sg-ec2-atlassian", !Ref Environment ] ]
      - Key: ised-cost-centre
        Value: cop-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment

  IngressAtlassian:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow incoming connections between Atlassian COTS
      GroupId: !Ref SecurityGroupAtlassianEC2
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref SecurityGroupAtlassianEC2

Outputs:
  SecurityGroupAtlassianEC2:
    Description: Security Group for all Atlassian EC2s
    Value: !GetAtt EC2.Outputs.EC2SecurityGroup
    Export:
      Name: !Join ['-', ["sg-ec2-crowd", !Ref "Environment" ]]
