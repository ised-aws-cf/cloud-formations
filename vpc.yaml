AWSTemplateFormatVersion: "2010-09-09"
# Version 1.0 - Initial version
# Version 2.0 - Support Private & Public Subnets. Creates Internet and NAT Gateways. Add FlowLogs and S3 endpoint.
Description: Template to create the complete VPC. Version 2.0
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
     - Label:
         default: "VPC Configuration"
       Parameters:
         - Name
         - Structure
         - NumberAZ
         - Environment
         - VPCCidrBlockAddress
         - VPCCidrBlockSize
    ParameterLabels:
      Name:
        default: "VPC Name"
      Structure:
        default: "VPC Structure"
      NumberAZ:
        default: "Number of AZ"
      Environment:
        default: "Environment"
Mappings:
  EnvironmentMap:
    dev:
      TransitGatewayId: "tgw-0ce6830db4d15fcbc"
    prod:
      TransitGatewayId: "tgw-"
Parameters:
  Name:
    Type: String
  Structure:
    Type: String
    Default: Private
    AllowedValues: 
      - Public-Private
      - Public
      - Private
  NumberAZ:
    Type: String
    AllowedValues:
    - 1
    - 2
    - 3
  Environment:
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - uat
      - qa
      - prod
  VPCCidrBlockAddress:
    Type: String
  VPCCidrBlockSize:
    Type: String
    AllowedValues:
    - 24
    - 25
    - 26
    - 27
    - 28
    Default: 26
  S3BucketNamePrefix:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3BucketNamePrefix
  AccountIDLog:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AccountIDLog
  AccountIDSharedServices:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AccountIDSharedServices
  AccountIDCots:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AccountIDCOTS
  AccountIDCotsDev:
    Type: AWS::SSM::Parameter::Value<String>
    Default: AccountIDCOTSDev
Conditions:
  HasAZ2: !Or [!Equals [ !Ref NumberAZ, "2" ], !Equals [ !Ref NumberAZ, "3" ]]
  HasAZ3: !Equals [ !Ref NumberAZ, "3" ]
  HasSubnetA: !Or [ !Equals [ !Ref Structure, Public-Private ], !Equals [ !Ref Structure, Private ]]
  HasSubnetB: !And [ !Condition HasAZ2, !Condition HasSubnetA]
  HasSubnetC: !And [ !Condition HasAZ3, !Condition HasSubnetA]
  HasSubnetPubA: !Or [ !Equals [ !Ref Structure, Public-Private ], !Equals [ !Ref Structure, Public ]]
  HasSubnetPubB: !And [ !Condition HasAZ2, !Condition HasSubnetPubA]
  HasSubnetPubC: !And [ !Condition HasAZ3, !Condition HasSubnetPubA]
  HasInternetGateway: !Condition HasSubnetPubA
  HasNATGatewayA: !And [ !Condition HasSubnetA, !Condition HasSubnetPubA]
  HasNATGatewayB: !And [ !Condition HasNATGatewayA, !Condition HasAZ2]
  HasNATGatewayC: !And [ !Condition HasNATGatewayA, !Condition HasAZ3]
  HasNoNATGatewayA: !And [!Condition HasSubnetA, !Not [ !Condition HasNATGatewayA ]]
  HasNoNATGatewayB: !And [!Condition HasNoNATGatewayA, !Condition HasAZ2 ]
  HasNoNATGatewayC: !And [!Condition HasNoNATGatewayA, !Condition HasAZ3 ]
  Has1Subnet: !And [!Or [!Equals [ !Ref Structure, Private ], !Equals [ !Ref Structure, Public ]], !Equals [ !Ref NumberAZ, "1" ]]
  Has2Subnets: !Or [ !And [!Equals [ !Ref Structure, Public-Private ],!Equals [ !Ref NumberAZ, "1" ]] , !And [!Or [!Equals [ !Ref Structure, Private ], !Equals [ !Ref Structure, Public ]], !Equals [ !Ref NumberAZ, "2" ]]] 
  Has4Subnets: !Or [ !And [!Equals [ !Ref Structure, Public-Private ],!Equals [ !Ref NumberAZ, "2" ]] , !And [!Or [!Equals [ !Ref Structure, Private ], !Equals [ !Ref Structure, Public ]], !Equals [ !Ref NumberAZ, "3" ]]] 
  Has8Subnets: !And [!Equals [ !Ref Structure, Public-Private ], !Equals [ !Ref NumberAZ, "3" ]]
  IsSharedServices: !Equals [ !Ref "AWS::AccountId", !Ref AccountIDSharedServices ]
  IsSharedServicesAndHasNATGatewayA: !And [ !Condition IsSharedServices, !Condition HasNATGatewayA ]
Resources:
  SubFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !ImportValue LambdaExecutionRole
      Code:
        ZipFile: !Sub |
          var response = require('cfn-response');
          exports.handler = function(event, context) {
            var result = parseInt(event.ResourceProperties.Op1) - parseInt(event.ResourceProperties.Op2);
            response.send(event, context, response.SUCCESS, {Value: result});
          };
      Runtime: nodejs12.x
  SubnetCidrBlockSize:
    Type: Custom::Sub
    Properties:
      ServiceToken: !GetAtt SubFunction.Arn
      Op1: !If [ Has8Subnets, 29, !If [ Has4Subnets, 30, !If [ Has2Subnets, 31, 32 ] ] ]
      Op2: !Ref VPCCidrBlockSize
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join ['/', [!Ref "VPCCidrBlockAddress",  !Ref "VPCCidrBlockSize" ]]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join ['-', ["vpc", !Ref "AWS::AccountId", !Ref Name, !Ref Environment ]]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  # Subnets
  SubnetA:
    Type: AWS::EC2::Subnet
    Condition: HasSubnetA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, !If [ Has8Subnets, 8, !If [ Has4Subnets, 4, !If [ Has2Subnets, 2, 1 ] ] ], !GetAtt SubnetCidrBlockSize.Value ] ]
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join ['-', ["subnet", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", !Select [ 0, !GetAZs ''], "private" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  SubnetPubA:
    Type: AWS::EC2::Subnet
    Condition: HasSubnetPubA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ !If [ HasSubnetA, !If [ HasAZ3, 3, !If [ HasAZ2, 2, 1 ] ], 0 ], !Cidr [ !GetAtt VPC.CidrBlock, !If [ Has8Subnets, 8, !If [ Has4Subnets, 4, !If [ Has2Subnets, 2, 1 ] ] ], !GetAtt SubnetCidrBlockSize.Value ] ]
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join ['-', ["subnet", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", !Select [ 0, !GetAZs ''], "public" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  SubnetB:
    Type: AWS::EC2::Subnet
    Condition: HasSubnetB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, !If [ Has8Subnets, 8, !If [ Has4Subnets, 4, !If [ Has2Subnets, 2, 1 ] ] ], !GetAtt SubnetCidrBlockSize.Value ] ]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join ['-', ["subnet", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", !Select [ 1, !GetAZs ''], "private" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  SubnetPubB:
    Type: AWS::EC2::Subnet
    Condition: HasSubnetPubB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ !If [ HasSubnetA, !If [ HasAZ3, 4, 3 ], 1 ] , !Cidr [ !GetAtt VPC.CidrBlock, !If [ Has8Subnets, 8, !If [ Has4Subnets, 4, !If [ Has2Subnets, 2, 1 ] ] ], !GetAtt SubnetCidrBlockSize.Value ] ]
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join ['-', ["subnet", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", !Select [ 1, !GetAZs ''], "public" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  SubnetC:
    Type: AWS::EC2::Subnet
    Condition: HasSubnetC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, !If [ Has8Subnets, 8, !If [ Has4Subnets, 4, !If [ Has2Subnets, 2, 1 ] ] ], !GetAtt SubnetCidrBlockSize.Value ] ]
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join ['-', ["subnet", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", !Select [ 2, !GetAZs ''], "private" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  SubnetPubC:
    Type: AWS::EC2::Subnet
    Condition: HasSubnetPubC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ !If [ HasSubnetA, 5, 2 ] ,!Cidr [ !GetAtt VPC.CidrBlock, !If [ Has8Subnets, 8, !If [ Has4Subnets, 4, !If [ Has2Subnets, 2, 1 ] ] ], !GetAtt SubnetCidrBlockSize.Value ] ]
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Join ['-', ["subnet", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", !Select [ 2, !GetAZs ''], "public" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
# Create Internet Gateway if the VPC has public subnets
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: HasInternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ['-', ["igw", !Ref "AWS::AccountId", !Ref "Name", !Ref "Environment" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref "Environment"
  VPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: HasInternetGateway
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref InternetGateway
# Create NAT Gateway if the VPC has both public & private subnets
  NATAEIP:
    Type: AWS::EC2::EIP
    Condition: HasNATGatewayA
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      Domain: vpc
  NATBEIP:
    Type: AWS::EC2::EIP
    Condition: HasNATGatewayB
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      Domain: vpc
  NATCEIP:
    Type: AWS::EC2::EIP
    Condition: HasNATGatewayC
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      Domain: vpc
  NATGatewayA:
    Type: AWS::EC2::NatGateway
    Condition: HasNATGatewayA
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt NATAEIP.AllocationId
      SubnetId: !Ref SubnetPubA
      Tags:
      - Key: Name
        Value: !Join ['-', ["natgw", !Ref "AWS::AccountId", !Ref "Environment", !Ref "Name", !Select [ 0, !GetAZs ''] ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref "Environment"
  NATGatewayB:
    Type: AWS::EC2::NatGateway
    Condition: HasNATGatewayB
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt NATBEIP.AllocationId
      SubnetId: !Ref SubnetPubB
      Tags:
      - Key: Name
        Value: !Join ['-', ["natgw", !Ref "AWS::AccountId", !Ref "Environment", !Ref "Name", !Select [ 1, !GetAZs ''] ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref "Environment"
  NATGatewayC:
    Type: AWS::EC2::NatGateway
    Condition: HasNATGatewayC
    DependsOn: VPCInternetGatewayAttachment
    Properties:
      AllocationId: !GetAtt NATCEIP.AllocationId
      SubnetId: !Ref SubnetPubC
      Tags:
      - Key: Name
        Value: !Join ['-', ["natgw", !Ref "AWS::AccountId", !Ref "Environment", !Ref "Name", !Select [ 2, !GetAZs ''] ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref "Environment"
# Transit Gateways resources
  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds: !If [ HasSubnetA, !If [ HasAZ3, [!Ref SubnetA , !Ref SubnetB, !Ref SubnetC], !If [ HasAZ2, [!Ref SubnetA , !Ref SubnetB], [!Ref SubnetA] ] ], !If [ HasAZ3, [!Ref SubnetPubA , !Ref SubnetPubB, !Ref SubnetPubC], !If [ HasAZ2, [!Ref SubnetPubA , !Ref SubnetPubB], [!Ref SubnetPubA] ] ]]
      Tags:
      - Key: Name
        Value: !Join ['-', ["tgw-attach", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
      #List All Available Transit Gateways
      TransitGatewayId: !FindInMap [EnvironmentMap, !Ref Environment, TransitGatewayId]
      VpcId: !Ref VPC
  TransitGatewayAssociation:
    Condition: IsSharedServices
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    DependsOn: TransitGatewayAttachment
    Properties: 
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId:
        Fn::ImportValue:
          Fn::Sub: "tgw-rt-network-${Environment}"

  TransitGatewayPropagation:
    Condition: IsSharedServices
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    DependsOn: TransitGatewayAttachment
    Properties: 
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId:
        Fn::ImportValue:
          Fn::Sub: "tgw-rt-network-${Environment}"
# Route Table
  RouteTableA:
    Type: AWS::EC2::RouteTable
    Condition: HasSubnetA
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['-', ["rtb", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", "PrivateA" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  RouteTableB:
    Type: AWS::EC2::RouteTable
    Condition: HasSubnetB
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['-', ["rtb", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", "PrivateB" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  RouteTableC:
    Type: AWS::EC2::RouteTable
    Condition: HasSubnetC
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['-', ["rtb", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", "PrivateC" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Condition: HasSubnetPubA
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['-', ["rtb", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment", "Public" ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
# Route Table Associations
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasSubnetA
    Properties:
      RouteTableId: !Ref RouteTableA
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasSubnetB
    Properties:
      RouteTableId: !Ref RouteTableB
      SubnetId: !Ref SubnetB
  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasSubnetC
    Properties:
      RouteTableId: !Ref RouteTableC
      SubnetId: !Ref SubnetC
  SubnetPubARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasSubnetPubA
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPubA
  SubnetPubBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasSubnetPubB
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPubB
  SubnetPubCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: HasSubnetPubC
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPubC
# Routes  
  RoutePublicOut:
    Type: AWS::EC2::Route
    Condition: HasSubnetPubA
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTablePublic
      GatewayId: !Ref InternetGateway
  RoutePublicIn:
    Type: AWS::EC2::Route
    Condition: HasSubnetPubA
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: 100.96.192.0/20
      RouteTableId: !Ref RouteTablePublic
      TransitGatewayId: !FindInMap [EnvironmentMap, !Ref Environment, TransitGatewayId]
  TransitGatewayRoutePublicOut:
    Type: AWS::EC2::TransitGatewayRoute
    Condition: IsSharedServicesAndHasNATGatewayA
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayAttachmentId: !Ref TransitGatewayAttachment
      TransitGatewayRouteTableId:
        Fn::ImportValue:
          Fn::Sub: "tgw-rt-network-${Environment}"
  RouteNATAOut:
    Type: AWS::EC2::Route
    Condition: HasNATGatewayA
    DependsOn: NATGatewayA
    Properties:
      RouteTableId: !Ref RouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayA
  RouteTGAOut:
    Type: AWS::EC2::Route
    Condition: HasNoNATGatewayA
    DependsOn: TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !FindInMap [EnvironmentMap, !Ref Environment, TransitGatewayId]
  RouteAIn:
    Type: AWS::EC2::Route
    Condition: HasNATGatewayA
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: 100.96.192.0/20
      RouteTableId: !Ref RouteTableA
      TransitGatewayId: !FindInMap [EnvironmentMap, !Ref Environment, TransitGatewayId]
  RouteNATBOut:
    Type: AWS::EC2::Route
    Condition: HasNATGatewayB
    DependsOn: NATGatewayB
    Properties:
      RouteTableId: !Ref RouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayB
  RouteTGBOut:
    Type: AWS::EC2::Route
    Condition: HasNoNATGatewayB
    DependsOn: TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !FindInMap [EnvironmentMap, !Ref Environment, TransitGatewayId]
  RouteBIn:
    Type: AWS::EC2::Route
    Condition: HasNATGatewayB
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: 100.96.192.0/20
      RouteTableId: !Ref RouteTableB
      TransitGatewayId: !FindInMap [EnvironmentMap, !Ref Environment, TransitGatewayId]
  RouteNATCOut:
    Type: AWS::EC2::Route
    Condition: HasNATGatewayC
    DependsOn: NATGatewayC
    Properties:
      RouteTableId: !Ref RouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayC
  RouteTGCOut:
    Type: AWS::EC2::Route
    Condition: HasNoNATGatewayC
    DependsOn: TransitGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayId: !FindInMap [EnvironmentMap, !Ref Environment, TransitGatewayId]
  RouteCIn:
    Type: AWS::EC2::Route
    Condition: HasNATGatewayC
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: 100.96.192.0/20
      RouteTableId: !Ref RouteTableC
      TransitGatewayId: !FindInMap [EnvironmentMap, !Ref Environment, TransitGatewayId]
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: HasSubnetA
    Properties:
      DBSubnetGroupDescription: "DB Subnet Group"
      SubnetIds: !If [ HasAZ3, [!Ref SubnetA , !Ref SubnetB, !Ref SubnetC], !If [ HasAZ2, [!Ref SubnetA , !Ref SubnetB], [!Ref SubnetA] ] ]
      Tags:
      - Key: Name
        Value: !Join ['-', ["dbsubnetgroup", !Ref "AWS::AccountId", !Ref Name,  !Ref "Environment"  ] ]
      - Key: ised-cost-centre
        Value: cio-rdad
      - Key: ised-project-id
        Value: cops-aws
      - Key: ised-environment
        Value: !Ref Environment
# Create S3 and SSM endpoints
  VPCS3Enpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: "*"
          Resource: "*"
      RouteTableIds:
        - !If [ HasSubnetA, !Ref RouteTableA, !Ref "AWS::NoValue"]
        - !If [ HasSubnetB, !Ref RouteTableB, !Ref "AWS::NoValue"]
        - !If [ HasSubnetC, !Ref RouteTableC, !Ref "AWS::NoValue"]
        - !If [ HasSubnetPubA, !Ref RouteTablePublic, !Ref "AWS::NoValue"]
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
# Enable VPC Flow logs to central S3 bucket in the Log Archive account
  VPCFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !ImportValue VPCFlowLogRole
      LogGroupName: !Join ['-', ["vpc-flow-log-group", !Ref "AWS::AccountId" ]]
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
  VPCFlowLogstoS3:
    Type: AWS::EC2::FlowLog
    Properties:
      LogDestination: !Join [':', [ "arn:aws:s3::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref AccountIDLog, "logs-vpc"]]]]
      LogDestinationType: s3
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export: 
      Name: !Join ['-', ["vpc", !Ref Name, !Ref "Environment" ]]
  VPCCidrBlock:
    Description: VPCCidrBlock
    Value: !GetAtt VPC.CidrBlock
    Export: 
      Name: !Join ['-', ["vpc-cidrblock", !Ref Name, !Ref "Environment" ]]
  SubnetA:
    Description: SubnetA
    Condition: HasSubnetA
    Value: !Ref SubnetA  
    Export: 
      Name: !Join ['-', ["subneta", !Ref Name, !Ref "Environment" ]]
  SubnetB:
    Description: SubnetB
    Condition: HasSubnetB
    Value: !Ref SubnetB
    Export: 
      Name: !Join ['-', ["subnetb", !Ref Name, !Ref "Environment" ]]
  SubnetC:
    Description: SubnetC
    Condition: HasSubnetC
    Value: !Ref SubnetC
    Export: 
      Name: !Join ['-', ["subnetc", !Ref Name, !Ref "Environment" ]]
  SubnetPubA:
    Description: SubnetPubA
    Condition: HasSubnetPubA
    Value: !Ref SubnetPubA 
    Export: 
      Name: !Join ['-', ["subneta-pub", !Ref Name, !Ref "Environment" ]]
  SubnetPubB:
    Description: SubnetPubB
    Condition: HasSubnetPubB
    Value: !Ref SubnetPubB
    Export: 
      Name: !Join ['-', ["subnetb-pub", !Ref Name, !Ref "Environment" ]]
  SubnetPubC:
    Description: SubnetPubC
    Condition: HasSubnetPubC
    Value: !Ref SubnetPubC
    Export: 
      Name: !Join ['-', ["subnetc-pub", !Ref Name, !Ref "Environment" ]]
  DBSubnetGroup:
    Description: DBSubnetGroup
    Condition: HasSubnetA
    Value: !Ref DBSubnetGroup
    Export: 
      Name: !Join ['-', ["dbsubnet", !Ref Name, !Ref "Environment" ]]

# This is for backward compatibility
#  VPCOld:
#    Description: VPC
#    Value: !Ref VPC
#    Export: 
#      Name: !Join ['-', ["vpc", !Ref "Environment" ]]
#  VPCCidrBlockOld:
#    Description: VPCCidrBlock
#    Value: !GetAtt VPC.CidrBlock
#    Export: 
#      Name: !Join ['-', ["vpc-cidrblock", !Ref "Environment" ]]
#  SubnetAOld:
#    Description: SubnetA
#    Condition: HasSubnetA
#    Value: !Ref SubnetA  
#    Export: 
#      Name: !Join ['-', ["subneta", !Ref "Environment" ]]
#  SubnetBOld:
#    Description: SubnetB
#    Condition: HasSubnetB
#    Value: !Ref SubnetB
#    Export: 
#      Name: !Join ['-', ["subnetb", !Ref "Environment" ]]
#  DBSubnetGroup:
#    Description: DBSubnetGroup
#    Condition: HasSubnetA
#    Value: !Ref DBSubnetGroup
#    Export: 
#      Name: !Join ['-', ["dbsubnet", !Ref "Environment" ]]
  
