AWSTemplateFormatVersion: "2010-09-09"
# Version 1.0 - Initial version
Parameters:
  AELBarn:
    Type: String
    Description: The Arn of the application Load balancer
  ListenerPort:
    Type: String
    # AllowedPattern: '[/d]'
  ListenerProtocol:
    Type: String
    Description: Acceptable values are HTTPS and HTTP
    # AllowedValues:
    #   - HTTPS
    #   - HTTP
    #   - TCP
    #   - " "
  # CertDomainName:
  #   Type: String
    # Default: new.ised-isde.canada.ca
  CertArn:
    Type: String
  DefaultType:
    Type: String
    # AllowedValues: 
    #   - fixed-response
    #   - redirect
    #   - forward
    #   - " "
  RedirectingPort:
    Type: String
  RedirectingProtocol:
    Type: String  
  RedirectingHost:
    Type: String
    Default: '#{host}'
  # RedirectinStatusCode:
  #   Type: String
  TargetTypeParam:
    Type: String
    Description: The TargetType for Forwarding listener
    # AllowedValues:
    #   - ip
    #   - instance
    #   - " "
  TargetGroupName:
    Type: String
  TargetGroupVPCId:
    # Type: AWS::EC2::VPC::Id
    Type: String
  TargetGroupPort: 
    Type: String
  TargetGroupProtocol:
    Type: String
    # AllowedValues:
    #   - HTTPS
    #   - HTTP
    #   - TCP
    #   - " "
  TargetIp:
    Type: String
    # Default: 100.96.206.24
  TargetPortNumber:
    Type: String
  CreateRobotTxtParam:
    Type: String
    Default: "true"
  PriorityParam:
    Type: String


Conditions: 
  DefaultIsFixed: !Equals [!Ref DefaultType, "fixed-response"]
  CreateCerts: !Equals [!Ref ListenerPort, "443"]
  DefaultIsFixedAndCreateCerts: !And
        - !Condition DefaultIsFixed
        - !Condition CreateCerts
  DefaultIsFixedAndNoCreateCerts: !And
        - !Condition DefaultIsFixed
        - !Not [!Condition CreateCerts]
  DefaultisRedirect: !Equals [!Ref DefaultType, "redirect"]
  DefaultIsForward: !Equals [!Ref DefaultType, "forward"]
  CreateRobotTxt: !Equals [!Ref CreateRobotTxtParam, "true"]
  # TargetTypeIsIp: !Equals [!Ref TargetTypeParam, "ip"]

  CreateRobotFixedCreateCerts: !And
        - !Condition CreateRobotTxt
        - !Condition DefaultIsFixedAndCreateCerts
  CreateRobotFixedNoCerts: !And
        - !Condition CreateRobotTxt
        - !Condition DefaultIsFixedAndNoCreateCerts

  CreateRobotRedirect: !And
        - !Condition CreateRobotTxt
        - !Condition DefaultisRedirect      

  CreateRobotForward: !And
        - !Condition CreateRobotTxt
        - !Condition DefaultIsForward             

Resources:

    LoadBalancerListenerDefaltIsFixedCreateCerts:
      Condition: DefaultIsFixedAndCreateCerts
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Certificates:
          # - CertificateArn:  !Ref mycert
          - CertificateArn:  !Ref CertArn
        LoadBalancerArn: !Ref AELBarn
        Port: !Ref ListenerPort
        Protocol: !Ref ListenerProtocol
        DefaultActions:
         - Type: fixed-response
           FixedResponseConfig: 
            ContentType: text/plain
            StatusCode: 503
      # DependsOn: mycert

    LoadBalancerListenerDefaltIsFixedNoCerts:
      Condition: DefaultIsFixedAndNoCreateCerts
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref AELBarn
        Port: !Ref ListenerPort
        Protocol: !Ref ListenerProtocol
        DefaultActions:
         - Type: fixed-response
           FixedResponseConfig: 
            ContentType: text/plain
            StatusCode: 503
    
    # mycert:
    #   Condition: CreateCerts
    #   Type: AWS::CertificateManager::Certificate
    #   Properties:
    #     DomainName: !Ref CertDomainName
    #     ValidationMethod: DNS

    LoadBalancerListenerDefaltIsRedirect:
      Condition: DefaultisRedirect
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref AELBarn
        Port: !Ref ListenerPort
        Protocol: !Ref ListenerProtocol
        DefaultActions:
         - Type: redirect
           RedirectConfig: 
            Host: !Ref RedirectingHost
            Path: '/#{path}'
            Port: !Ref RedirectingPort
            Protocol: !Ref RedirectingProtocol
            Query: '#{query}'
            StatusCode: HTTP_301

    LoadBalancerListenerDefaultIsForward:
      Condition: DefaultIsForward
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref AELBarn
        Port: !Ref ListenerPort
        Protocol: !Ref ListenerProtocol
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref CreateTargetGroup
      DependsOn:  CreateTargetGroup

    CreateTargetGroup:
      Condition: DefaultIsForward 
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: !Ref TargetGroupName
        VpcId: !Ref TargetGroupVPCId
        Port: !Ref TargetGroupPort
        Protocol: !Ref TargetGroupProtocol
        TargetType: !Ref TargetTypeParam
        Targets:
          - Id: !Ref TargetIp
            Port: !Ref TargetPortNumber

    CreateListenerRuleForRobotFixedCreateCerts:
      Condition: CreateRobotFixedCreateCerts
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: !Ref LoadBalancerListenerDefaltIsFixedCreateCerts
        Actions:
          - Type: fixed-response
            FixedResponseConfig: 
              ContentType: text/plain
              StatusCode: 200
        Conditions:
          - PathPatternConfig: 
              Values:
                - robots.txt
            Field: path-pattern
        Priority: !Ref PriorityParam

    CreateListenerRuleForRobotFixedNoCreateCerts:
      Condition: CreateRobotFixedNoCerts
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: !Ref LoadBalancerListenerDefaltIsFixedNoCerts
        Actions:
          - Type: fixed-response
            FixedResponseConfig: 
              ContentType: text/plain
              StatusCode: 200
        Conditions:
          - PathPatternConfig: 
              Values:
                - robots.txt
            Field: path-pattern
        Priority: !Ref PriorityParam        

    CreateListenerRuleForRobotRedirect:
      Condition: CreateRobotRedirect
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: !Ref LoadBalancerListenerDefaltIsRedirect
        Actions:
          - Type: fixed-response
            FixedResponseConfig: 
              ContentType: text/plain
              StatusCode: 200
        Conditions:
          - PathPatternConfig: 
              Values:
                - robots.txt
            Field: path-pattern
        Priority: !Ref PriorityParam      

    CreateListenerRuleForRobotForward:
      Condition: CreateRobotForward
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        ListenerArn: !Ref LoadBalancerListenerDefaultIsForward
        Actions:
          - Type: fixed-response
            FixedResponseConfig: 
              ContentType: text/plain
              StatusCode: 200
        Conditions:
          - PathPatternConfig: 
              Values:
                - robots.txt
            Field: path-pattern
        Priority: !Ref PriorityParam                