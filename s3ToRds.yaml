AWSTemplateFormatVersion: "2010-09-09"
# Version 1.0 - Initial version
Description: S3 to RDS Solution
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Projetc Information"
        Parameters: 
          - ProjectId
          - CostCentre
          - Environment
          - Email
      - Label:
          default: "VPC"
        Parameters:
          - VPC
          - VPCName
          - Subnet1
          - Subnet2
      - Label: 
          default: "Others"
        Parameters: 
          - Templates
          - S3TemplatesBucket
          - S3BucketNamePrefix
    ParameterLabels: 
      Email: 
        default: "e-mail to receive notifications about key rotations"
      ProjectId: 
        default: "Project Id"
      CostCentre: 
        default: "Cost Centre"
      Environment: 
        default: "Environment"
      VPC:
        default: "VPC"
      VPCName:
        default: "VPC Name"
      Subnet1:
        default: "Subnet 1"
      Subnet2:
        default: "Subnet 2"
      Templates:
        default: "S3 Bucket For Templates"
      S3TemplatesBucket:
        default: "S3 Bucket For Templates"
      S3BucketNamePrefix:
        default: "S3 Bucket Name Prefix"
Parameters:
  Templates:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3Templates
  S3TemplatesBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3TemplatesBucket
  S3BucketNamePrefix:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3BucketNamePrefix 
  Email:
    Type: String
  ProjectId:
    Type: String
  CostCentre:
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  VPCName:
    Type: String
  Subnet1:
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Type: AWS::EC2::Subnet::Id
  Environment:
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
Resources:
  RDSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ "ised", !Ref ProjectId, "role-rds" ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - rds.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ "ised", !Ref ProjectId, "policy-rds" ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    DependsOn: RDS
    Properties:
      Name: !Join [ '-', [ "ised", !Ref ProjectId, "secret-db" ] ]
      Description: 'This is my rds instance secret'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
  RDSSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DependsOn: RDSSecret
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !GetAtt [ RDS, Outputs.RDS]
      TargetType: AWS::RDS::DBInstance
  RDSAssociatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ "ised", !Ref ProjectId, "role-rds-association" ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [rds.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ "ised", !Ref ProjectId, "policy-lambdarole" ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource:
                  - !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref ProjectId ]]]]
                  - !Join [ "/", [ !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref ProjectId ]]]], "*"]]
              - Effect: "Allow"
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref RDSSecret

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  RDS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ '', [!Ref Templates, "rds.yaml" ]]
      Parameters:
        # ===== General Section =====
        ISEDProjectId: !Ref ProjectId
        CostCentre: !Ref CostCentre
        Environment: !Ref Environment
        # ===== VPC Section =====
        VPCId: !Ref VPC
        VPCName: !Ref VPCName
        Subnet1: !Ref Subnet1
        Subnet2: !Ref Subnet2
        # ===== RDS Section =====
        RDSOptions: "Create"
        DBInstanceId: !Ref ProjectId
        DBName: !Ref ProjectId
        RDSEngine: postgres
        RDSEngineVersion: "10.11"
        AllowMajorVersionUpgrade: False
        RDSStorage: 20
        RDSSize: db.t3.micro
        RDSMaxStorage: ""
        Schedule: "24-7"
        RDSBackupRetentionPeriod: "7"
        RDSMasterUserPassword: "Canada123"
        RDSSnapshot: ""
        Ec2IpAddress: ""
        OCPLink: <Yes>
        ISEDProjectId: !Ref ProjectId
        CostCentre: !Ref CostCentre
  S3:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - LambdaPermission
    Properties:
      TemplateURL: !Join [ '', [!Ref Templates, "s3.yaml" ]]
      Parameters:
        Name: !Ref ProjectId
        S3BucketPolicy: Local
        S3BucketAccess: Private
        KmsArn: NA
        LambdaArn: !GetAtt Lambda.Arn
        ProjectId: !Ref ProjectId
        CostCentre: !Ref CostCentre
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Lambda
      Principal: s3.amazonaws.com
      SourceArn: !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref ProjectId ]]]]
      SourceAccount: !Ref AWS::AccountId
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ "ised", !Ref ProjectId, "role-lambda-execution" ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ "ised", !Ref ProjectId, "policy-lambdarole" ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource:
                  - !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref ProjectId ]]]]
                  - !Join [ "/", [ !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref ProjectId ]]]], "*"]]
              - Effect: "Allow"
                Action: "secretsmanager:GetSecretValue"
                Resource: !Ref RDSSecret

      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref S3TemplatesBucket
        S3Key: "lambda/aws-psycopg2.zip"
      LayerName: !Join [ '-', [ "ised", !Ref ProjectId, "lambda-layer" ] ]
      LicenseInfo: MIT
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join [ '-', [ "ised", !Ref ProjectId, "lambda" ] ]
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Layers:
        - !Ref Layer
      Environment:
        Variables:
          POSTGRES_SCHEMA: "ised_staging"
          REGION_NAME: ca-central-1
          SECRET_NAME: !Join [ '-', [ "ised", !Ref ProjectId, "secret-db" ] ]
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt [ RDS, Outputs.RDSSecurityGroup]
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
      Code:
        S3Bucket: !Ref S3TemplatesBucket
        S3Key: "lambda/ised_osb_copy_s3_rds_postgres.zip"
  IAMUserS3:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ '', [!Ref Templates, "iam-user.yaml" ]]
      Parameters:
        Name: !Ref ProjectId
        ConsoleAccess: False
        CreateAccessKey: True
        Password: ""
        Email: !Ref Email
        ManagedPolicyArns: ""
  IAMPolicyS3:
    Type: AWS::IAM::Policy
    DependsOn: IAMUserS3
    Properties:
      PolicyName: !Join [ '-', [ "ised", !Ref ProjectId, "policy-iamusers3" ] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "s3:*"
            Resource:
              - !GetAtt [ S3, Outputs.BucketArn]
              - !Join [ "/", [!GetAtt [ S3, Outputs.BucketArn],"*"] ]
      Users:
        - !GetAtt 
          - IAMUserS3
          - Outputs.IAMUser
