AWSTemplateFormatVersion: "2010-09-09"
# Version 1.0 - Initial version
Description: S3 to RDS Solution
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Projetc Information"
        Parameters: 
          - DBInstanceId
          - DBName
          - DBSchema
          - DBUser
          - DBPassword
          - LambdaZipName
          - S3Name
          - Environment
          - Email
      - Label:
          default: "VPC"
        Parameters:
          - VPC
          - Subnet1
          - Subnet2
      - Label: 
          default: "Tags"
        Parameters: 
          - ProjectId
          - CostCentre
      - Label: 
          default: "Others"
        Parameters: 
          - Templates
          - S3TemplatesBucket
          - S3BucketNamePrefix
    ParameterLabels: 
      DBInstanceId:
        default: "DB Instance"
      DBName:
        default: "DB Name"
      DBPassword:
        default: "DB Password"
      DBSchema:
        default: "DB Schema"
      S3Name:
        default: "S3 Name"
      DBUser:
        default: "DB User Name"
      LambdaZipName:
        default: "The Name of the lambda zip file"
      Email: 
        default: "e-mail to receive notifications about key rotations"
      ProjectId: 
        default: "Project Id"
      CostCentre: 
        default: "Cost Centre"
      Environment: 
        default: "Environment"
      VPC:
        default: "VPC"
      Subnet1:
        default: "Subnet 1"
      Subnet2:
        default: "Subnet 2"
      Templates:
        default: "S3 Bucket For Templates"
      S3TemplatesBucket:
        default: "S3 Bucket For Templates"
      S3BucketNamePrefix:
        default: "S3 Bucket Name Prefix"
Parameters:
  Templates:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3Templates
  S3TemplatesBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3TemplatesBucket
  S3BucketNamePrefix:
    Type: AWS::SSM::Parameter::Value<String>
    Default: S3BucketNamePrefix 
  DBInstanceId:
    Type: String
  DBName:
    Type: String
  DBPassword:
    NoEcho: 'true'
    Description: Password database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBSchema:
    Type: String
  S3Name:
    Type: String
  DBUser:
    Type: String
  LambdaZipName:
    Type: String
  Email:
    Type: String
  ProjectId:
    Type: String
    Default: cops-aws
  CostCentre:
    Type: String
    Default: cio-rdad
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnet1:
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Type: AWS::EC2::Subnet::Id
  Environment:
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
Resources:
  IAMUserS3:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Join [ '', [!Ref Templates, "iam-user.yaml" ]]
      Parameters:
        Name: !Join [ "-", [ !Ref ProjectId, !Ref DBName]]
        ConsoleAccess: False
        CreateAccessKey: True
        Password: ""
        Email: !Ref Email
        ManagedPolicyArns: ""
  IAMPolicyS3:
    Type: AWS::IAM::Policy
    DependsOn: IAMUserS3
    Properties:
      PolicyName: !Join [ '-', [ "ised", !Ref ProjectId, "policy-iamusers3" ] ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "s3:*"
            Resource:
              - !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref S3Name ]]]]
              - !Join [ "/", [ !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref S3Name ]]]], "*"]]
      Users:
        - !GetAtt [IAMUserS3, Outputs.IAMUser]
  RDSAssociatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ "ised", !Ref ProjectId, "role-rds-association" ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [rds.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ "ised", !Ref ProjectId, "policy-lambdarole" ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource:
                  - !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref S3Name ]]]]
                  - !Join [ "/", [ !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref S3Name ]]]], "*"]]
  RDS:
    Type: AWS::CloudFormation::Stack
    DependsOn: RDSAssociatedRole
    Properties:
      TemplateURL: !Join [ '', [!Ref Templates, "rds.yaml" ]]
      Parameters:
        # ===== General Section =====
        ISEDProjectId: !Ref ProjectId
        CostCentre: !Ref CostCentre
        Environment: !Ref Environment
        # ===== VPC Section =====
        VPCId: !Ref VPC
        Subnet1: !Ref Subnet1
        Subnet2: !Ref Subnet2
        # ===== RDS Section =====
        RDSOptions: "Create"
        DBInstanceId: !Ref DBInstanceId
        DBName: !Ref DBName
        RDSEngine: postgres
        RDSEngineVersion: "10.11"
        AllowMajorVersionUpgrade: False
        RDSStorage: 20
        RDSSize: db.t3.micro
        RDSMaxStorage: ""
        Schedule: "24-7"
        RDSBackupRetentionPeriod: "7"
        CreateAccessKey: <Yes>
        DBUser: !Ref DBUser
        DBPassword: !Ref DBPassword
        IAMAssociationRole: !GetAtt RDSAssociatedRole.Arn
        IAMAssociationFeature: s3Import
        RDSSnapshot: ""
        Ec2IpAddress: ""
        OCPLink: <Yes>
        AddOwnGroup: <Yes>
        ISEDProjectId: !Ref ProjectId
        CostCentre: !Ref CostCentre
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: RDS
    Properties:
      RoleName: !Join [ '-', [ "ised", !Ref ProjectId, "role-lambda-execution" ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Join [ '-', [ "ised", !Ref ProjectId, "policy-lambdarole" ] ]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: "Allow"
                Action: "s3:*"
                Resource:
                  - !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref S3Name ]]]]
                  - !Join [ "/", [ !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref S3Name ]]]], "*"]]
              - Effect: "Allow"
                Action: "secretsmanager:GetSecretValue"
                Resource: !GetAtt [RDS, Outputs.RDSSecret]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref S3TemplatesBucket
        S3Key: "lambda/aws-psycopg2.zip"
      LayerName: !Join [ '-', [ "ised", !Ref ProjectId, "lambda-layer" ] ]
      LicenseInfo: MIT
  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: 
      - LambdaExecutionRole
      - Layer
      - RDS  
    Properties:
      FunctionName: !Join [ '-', [ "ised", !Ref ProjectId, "lambda" ] ]
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Layers:
        - !Ref Layer
      Environment:
        Variables:
          POSTGRES_SCHEMA: !Ref DBSchema
          REGION_NAME: ca-central-1
          SECRET_NAME: !Join [ '-', [ "ised", !Ref ProjectId, !Ref DBName, "secret-db" ] ]
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt [ RDS, Outputs.RDSSecurityGroup]
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2
      Code:
        S3Bucket: !Ref S3TemplatesBucket
        S3Key: !Join [ "", ["lambda/", !Ref LambdaZipName, ".zip"]]
  LambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: Lambda
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Lambda
      Principal: s3.amazonaws.com
      SourceArn: !Join [ "",[ "arn:aws:s3:::", !Join ['-', [!Ref S3BucketNamePrefix, !Ref "AWS::AccountId", !Ref ProjectId, !Ref S3Name ]]]]
      SourceAccount: !Ref AWS::AccountId
  S3:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - LambdaPermission
    Properties:
      TemplateURL: !Join [ '', [!Ref Templates, "s3.yaml" ]]
      Parameters:
        Name: !Ref S3Name
        S3BucketPolicy: Local
        S3BucketAccess: Private
        KmsArn: NA
        LambdaArn: !GetAtt Lambda.Arn
        ProjectId: !Ref ProjectId
        CostCentre: !Ref CostCentre


  

